// Generated by view binder compiler. Do not edit!
package com.refunnnn.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.refunnnn.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemHistoryBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView btnCopyCode;

  @NonNull
  public final TextView dateText;

  @NonNull
  public final TextView pointsText;

  @NonNull
  public final RecyclerView recyclerBotol;

  @NonNull
  public final TextView statusText;

  @NonNull
  public final TextView timeText;

  @NonNull
  public final TextView txtTotalPoin;

  @NonNull
  public final TextView txtVoucherCode;

  private ItemHistoryBinding(@NonNull CardView rootView, @NonNull TextView btnCopyCode,
      @NonNull TextView dateText, @NonNull TextView pointsText, @NonNull RecyclerView recyclerBotol,
      @NonNull TextView statusText, @NonNull TextView timeText, @NonNull TextView txtTotalPoin,
      @NonNull TextView txtVoucherCode) {
    this.rootView = rootView;
    this.btnCopyCode = btnCopyCode;
    this.dateText = dateText;
    this.pointsText = pointsText;
    this.recyclerBotol = recyclerBotol;
    this.statusText = statusText;
    this.timeText = timeText;
    this.txtTotalPoin = txtTotalPoin;
    this.txtVoucherCode = txtVoucherCode;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemHistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemHistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_history, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemHistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCopyCode;
      TextView btnCopyCode = ViewBindings.findChildViewById(rootView, id);
      if (btnCopyCode == null) {
        break missingId;
      }

      id = R.id.dateText;
      TextView dateText = ViewBindings.findChildViewById(rootView, id);
      if (dateText == null) {
        break missingId;
      }

      id = R.id.pointsText;
      TextView pointsText = ViewBindings.findChildViewById(rootView, id);
      if (pointsText == null) {
        break missingId;
      }

      id = R.id.recyclerBotol;
      RecyclerView recyclerBotol = ViewBindings.findChildViewById(rootView, id);
      if (recyclerBotol == null) {
        break missingId;
      }

      id = R.id.statusText;
      TextView statusText = ViewBindings.findChildViewById(rootView, id);
      if (statusText == null) {
        break missingId;
      }

      id = R.id.timeText;
      TextView timeText = ViewBindings.findChildViewById(rootView, id);
      if (timeText == null) {
        break missingId;
      }

      id = R.id.txtTotalPoin;
      TextView txtTotalPoin = ViewBindings.findChildViewById(rootView, id);
      if (txtTotalPoin == null) {
        break missingId;
      }

      id = R.id.txtVoucherCode;
      TextView txtVoucherCode = ViewBindings.findChildViewById(rootView, id);
      if (txtVoucherCode == null) {
        break missingId;
      }

      return new ItemHistoryBinding((CardView) rootView, btnCopyCode, dateText, pointsText,
          recyclerBotol, statusText, timeText, txtTotalPoin, txtVoucherCode);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
